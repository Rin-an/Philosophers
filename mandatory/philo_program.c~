/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo_program.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ssadiki <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/14 21:23:12 by ssadiki           #+#    #+#             */
/*   Updated: 2022/09/14 22:04:15 by ssadiki          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	take_forks(t_philo *philo)
{
	if (philo->num % 2 != 0)
	{
		pthread_mutex_lock(&philo->lfork);
		printf("%li ms %i has taken left fork.\n", current_time() - philo->info->init, philo->num);
		/*pthread_mutex_lock(&philo->rfork);
		  printf("%li ms %i has taken right fork.\n", current_time() - philo->info->init, philo->num);*/
	}
	else
	{
		pthread_mutex_lock(&philo->rfork);
		printf("%li ms %i has taken right fork.\n", current_time() - philo->info->init, philo->num);
		/*pthread_mutex_lock(&philo->lfork);
		  printf("%li ms %i has taken left fork.\n", current_time() - philo->info->init, philo->num);*/
	}
	if (philosopher_dead(philo))
	{
		pthread_mutex_lock(&philo->info->print);
		printf("%li ms %i died.\n", current_time() - philo->info->init, philo->num);
		pthread_mutex_unlock(&(philo->info->print));
		return (0);
	}
	if (philo->num % 2 != 0)
	{
		if (pthread_mutex_lock(&philo->rfork))
			return (pthread_mutex_unlock(&philo->lfork), 1);
	}
	printf("%li ms %i is eating.\n", current_time() - philo->info->init, philo->num);
	return (0);
}

void    *start_philo(void *vargp)
{
	t_philo *philo;
	int n;

	philo = (t_philo *) vargp;
	n = philo->info->num_philo;
	philo->eat_count = 0;
	philo->last_eat = 0;
	//  philo->lfork = 0;
	//  philo->rfork = 0;
	while (!philo->info->dead)
	{
		//printf("last eat = %li\n", philo->last_eat);
	/*	if (philo->num % 2 != 0)
		{
			//  pthread_mutex_lock(&philo->fork[philo->num - 1]);
			pthread_mutex_lock(&philo->lfork);
			printf("%li ms %i has taken left fork.\n", current_time() - philo->info->init, philo->num);
			pthread_mutex_lock(&philo->rfork);
			  printf("%li ms %i has taken right fork.\n", current_time() - philo->info->init, philo->num);
		}
		else
		{
			//  pthread_mutex_lock(&philo->fork[((philo->num + 1) % n) - 1]);
			pthread_mutex_lock(&philo->rfork);
			printf("%li ms %i has taken right fork.\n", current_time() - philo->info->init, philo->num);
			pthread_mutex_lock(&philo->lfork);
			  printf("%li ms %i has taken left fork.\n", current_time() - philo->info->init, philo->num);
		}
		if (philosopher_dead(philo))
		{
			pthread_mutex_lock(&philo->info->print);
			printf("%li ms %i died.\n", current_time() - philo->info->init, philo->num);
			pthread_mutex_unlock(&(philo->info->print));
			return (0);
		}
		if (philo->num % 2 != 0)
		{
			if (pthread_mutex_lock(&philo->rfork))
				return (pthread_mutex_unlock(&philo->lfork), 1);
		}
		printf("%li ms %i is eating.\n", current_time() - philo->info->init, philo->num);*/
		if (take_forks(philo))

		philo->eat_count++;
		philo->last_eat = current_time() - philo->info->init;
		ft_usleep(philo->info->time_eat, current_time() - philo->info->init);
		pthread_mutex_unlock(&philo->lfork);
		pthread_mutex_unlock(&philo->rfork);
		printf("%li ms %i is sleeping.\n", current_time() - philo->info->init, philo->num);
		ft_usleep(philo->info->time_sleep, current_time() - philo->info->init);
		printf("%li ms %i is thinking.\n", current_time() - philo->info->init, philo->num);
	}
	return (NULL);
}
